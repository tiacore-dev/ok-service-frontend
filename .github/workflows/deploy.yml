name: Deploy to Server

on:
  push:
    branches: [ master, stage, dev ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      API_URL_PROD: ${{ secrets.API_URL_PROD }}
      API_URL_DEV: ${{ secrets.API_URL_DEV }}
      API_URL_STAGE: ${{ secrets.API_URL_STAGE }}
      API_URL_TEST: ${{ secrets.API_URL_TEST }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set API URLs from secrets
        id: set-urls
        run: |
          if [ "${GITHUB_REF_NAME}" = "master" ]; then
            echo "api_url=${API_URL_PROD}" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF_NAME}" = "dev" ]; then
            echo "api_url=${API_URL_DEV}" >> $GITHUB_OUTPUT
          elif [ "${GITHUB_REF_NAME}" = "stage" ]; then
            echo "api_url=${API_URL_STAGE}" >> $GITHUB_OUTPUT
          else
            echo "api_url=${API_URL_TEST}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ok-service-frontend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/ok-service-frontend:cache
          cache-to: type=inline
          build-args: |
            REACT_APP_API_URL=${{ steps.set-urls.outputs.api_url }}
            REACT_APP_WP=${{ secrets.APP_WP }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ==== –í–´–ë–û–† SSH-–ö–õ–Æ–ß–ê/–Æ–ó–ï–†–ê/IP –ü–û –í–ï–¢–ö–ï ====
      - name: Setup SSH for Master
        if: github.ref_name == 'master'
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_MASTER }}
      - name: Set Master host vars
        if: github.ref_name == 'master'
        run: |
          echo "SSH_USER=${{ secrets.SSH_USER_MASTER }}" >> $GITHUB_ENV
          echo "SERVER_IP=${{ secrets.SERVER_IP_MASTER }}" >> $GITHUB_ENV

      - name: Setup SSH for Dev
        if: github.ref_name == 'dev'
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_DEV }}
      - name: Set Dev host vars
        if: github.ref_name == 'dev'
        run: |
          echo "SSH_USER=${{ secrets.SSH_USER_DEV }}" >> $GITHUB_ENV
          echo "SERVER_IP=${{ secrets.SERVER_IP_DEV }}" >> $GITHUB_ENV

      - name: Setup SSH for Stage
        if: github.ref_name == 'stage'
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_STAGE }}
      - name: Set Stage host vars
        if: github.ref_name == 'stage'
        run: |
          echo "SSH_USER=${{ secrets.SSH_USER_STAGE }}" >> $GITHUB_ENV
          echo "SERVER_IP=${{ secrets.SERVER_IP_STAGE }}" >> $GITHUB_ENV
      # ============================================

      - name: Determine Deployment Path and Tag
        run: |
          if [[ "${{ github.ref_name }}" == "master" ]]; then
            echo "DEPLOY_PATH=apps/ok-service-frontend" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "dev" ]]; then
            echo "DEPLOY_PATH=apps/ok-service-frontend-dev" >> $GITHUB_ENV
          elif [[ "${{ github.ref_name }}" == "stage" ]]; then
            echo "DEPLOY_PATH=apps/ok-service-frontend-stage" >> $GITHUB_ENV
          else
            echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–µ—Ç–∫–∞! –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å."
            exit 1
          fi
          echo "DEPLOY_TAG=${{ github.sha }}" >> $GITHUB_ENV
          echo "DEPLOY_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV

      - name: Deploy Frontend
        env:
          SSH_USER: ${{ env.SSH_USER }}
          SERVER_IP: ${{ env.SERVER_IP }}
          DEPLOY_PATH: ${{ env.DEPLOY_PATH }}
          DEPLOY_TAG: ${{ env.DEPLOY_TAG }}
          DEPLOY_BRANCH: ${{ env.DEPLOY_BRANCH }}
        run: |
          echo "üöÄ –î–µ–ø–ª–æ–π –Ω–∞ ${SSH_USER}@${SERVER_IP} –≤ ${DEPLOY_PATH} (branch: ${DEPLOY_BRANCH}) ..."
          ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 "${SSH_USER}@${SERVER_IP}" << 'EOF'
            set -euo pipefail

            export DOCKERHUB_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}'
            export DOCKERHUB_TOKEN='${{ secrets.DOCKERHUB_TOKEN }}'
            export DEPLOY_TAG='${{ env.DEPLOY_TAG }}'
            export DEPLOY_BRANCH='${{ env.DEPLOY_BRANCH }}'
            export DEPLOY_PATH='${{ env.DEPLOY_PATH }}'

            cd "$DEPLOY_PATH" || { echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –≤ $DEPLOY_PATH"; exit 1; }

            echo "‚û°Ô∏è git pull origin ${DEPLOY_BRANCH}"
            git fetch origin "${DEPLOY_BRANCH}"
            git checkout "${DEPLOY_BRANCH}" || true
            git pull --rebase origin "${DEPLOY_BRANCH}" || { echo "‚ùå git pull –Ω–µ —É–¥–∞–ª—Å—è"; exit 1; }

            echo "‚û°Ô∏è docker login"
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin \
              || { echo "‚ùå Docker login failed"; exit 1; }

            echo "‚û°Ô∏è docker pull \$DOCKERHUB_USERNAME/ok-service-frontend:\$DEPLOY_TAG"
            docker pull "$DOCKERHUB_USERNAME/ok-service-frontend:$DEPLOY_TAG" \
              || { echo "‚ùå Docker pull failed"; exit 1; }

            # –û–±–Ω–æ–≤–ª—è–µ–º .env —Å –Ω–æ–≤—ã–º —Ç–µ–≥–æ–º
            touch .env
            if grep -q "^TAG=" .env; then
              sed -i "s/^TAG=.*/TAG=\$DEPLOY_TAG/" .env
            else
              echo "TAG=\$DEPLOY_TAG" >> .env
            fi

            echo "‚û°Ô∏è docker compose up -d"
            docker compose pull --ignore-pull-failures || true
            docker compose up -d --remove-orphans \
              || { echo "‚ùå docker compose up failed"; exit 1; }

            echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à—ë–Ω"
          EOF

  notify:
    name: üì¨ Telegram Notify
    runs-on: ubuntu-latest
    needs: [ build-and-push, deploy ]
    if: always()
    steps:
      - name: üì¨ Telegram Notification
        run: |
          COMMIT_MESSAGE="${{ github.event.head_commit.message }}"
          REF_NAME="${{ github.ref_name }}"
          SHA="${{ github.sha }}"
          AUTHOR="${{ github.event.head_commit.author.name }}"
          RUN_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          DEPLOY_STATUS="${{ needs.deploy.result }}"

          if [ "$DEPLOY_STATUS" != "success" ]; then
            STATUS="üõë *–û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è*"
            EXTRA_LINK="[üîç –û—Ç–∫—Ä—ã—Ç—å GitHub Actions]($RUN_URL)"
          else
            STATUS="‚úÖ –î–µ–ø–ª–æ–π *—É—Å–ø–µ—à–µ–Ω*"
            EXTRA_LINK=""
          fi

          CHAT_ID="${{ secrets.TELEGRAM_CHAT_ID }}"
          THREAD_ID="${{ secrets.TELEGRAM_THREAD_ID }}"

          TEXT="${STATUS}

          üì¶ *–í–µ—Ç–∫–∞:* \`$REF_NAME\`
          üîñ *–¢–µ–≥:* \`$SHA\`
          üë§ *–ê–≤—Ç–æ—Ä –¥–µ–ø–ª–æ—è:* [$AUTHOR](https://github.com/$AUTHOR)
          üìù *–ö–æ–º–º–∏—Ç:* $COMMIT_MESSAGE
          $EXTRA_LINK"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id="$CHAT_ID" \
            -d message_thread_id=$THREAD_ID \
            -d parse_mode=Markdown \
            -d "text=$TEXT"
